/**
 * Exploit.java 0.8
 *
 * Java Bro Fuzzer. A stateless network protocol fuzzer for penetration tests.
 * It allows for the identification of certain classes of security bugs, by
 * means of creating malformed data and having the network protocol in question
 * consume the data.
 *
 * Copyright (C) 2007 subere (at) uncon org
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
 * MA  02110-1301, USA.
 */
package org.owasp.jbrofuzz.core;

/**
 * <p>
 * A database is a collection of exploits, grouped together with a number of different tags.
 * </p>
 * 
 * @author subere (at) uncon (dot) org
 * @version 0.7
 */
public class Exploit {
	
	private String name, description, view, author, url, summary;
	
	private String [] tags;
	
	/**
	 * <p>
	 * The constructor, passing all parameters in order to define an exploit.
	 * </p>
	 * 
	 * @param name
	 * @param description
	 * @param view
	 * @param tags
	 * @param author
	 * @param url
	 * @param summary
	 */
	public Exploit(String name, String description, String view, String tags,
									String author, String url, String summary) {
		
		this.name = name;
		this.description = description;
		this.view = view;
		this.tags = tags.split(",");
		this.author = author;
		this.url = url;
		this.summary = summary;
		
	}

	/**
	 * <p>
	 * The constructor, passing parameters in order to define an exploit.
	 * </p>
	 * 
	 * @param name
	 * @param description
	 * @param view
	 * @param tags
	 * @param author
	 * @param url
	 */
	public Exploit(String name, String description, String view, String tags,
									String author, String url) {
		
		this(name, description, view, tags, author, url, "");
		
	}
	
	/**
	 * <p>
	 * The constructor, passing parameters in order to define an exploit.
	 * </p>
	 * 
	 * @param name
	 * @param description
	 * @param view
	 * @param tags
	 * @param author
	 */
	public Exploit(String name, String description, String view, String tags,
									String author) {
		
		this(name, description, view, tags, author, "", "");
		
	}

	/**
	 * <p>
	 * The constructor, passing parameters in order to define an exploit.
	 * </p>
	 * 
	 * @param name
	 * @param description
	 * @param view
	 * @param tags
	 */
	public Exploit(String name, String description, String view, String tags) {
		
		this(name, description, view, tags, "", "", "");
		
	}
	
	/**
	 * <p>Get the name of the exploit.</p>
	 * @return String
	 */
	public String getName() {
		return this.name;
	}
	
	/**
	 * <p>Get the description of the exploit.</p>
	 * @return String
	 */
	public String getDescription() {
		return this.description;
	}
	
	/**
	 * <p>Get the view, corresponding to the actual exploit code.</p>
	 * @return String
	 */
	public String getView() {
		return this.view;
	}

	/**
	 * <p>Get the String array of the corresponding tags, under which the String is categorised.</p>
	 * @return String[]
	 */
	public String[] getTags() {
		return this.tags;
	}
	
	/**
	 * <p>Get the author, to whom the exploit is attributed.</p>
	 * @return String
	 */
	public String getAuthor() {
		return this.author;
	}
	
	/**
	 * <p>Get the URL, as a string, related to the exploit.</p>
	 * @return String
	 */
	public String getURL() {
		return this.url;
	}
	
	/**
	 * <p>Get any summary information, relating to the exploit.</p>
	 * @return String
	 */
	public String getSummary() {
		return this.summary;
	}
	
	/**
	 * <p>Method to check the existence of a tag for the given exploit.</p>
	 * @param inputTag
	 * @return boolean
	 */
	public boolean hasTag(String inputTag) {
		for (String tag : this.tags) {
			if(tag.equalsIgnoreCase(inputTag)) {
				return true;
			}
		}
		return false;
	}
}
